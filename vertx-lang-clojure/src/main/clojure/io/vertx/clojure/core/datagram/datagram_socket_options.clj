(ns io.vertx.clojure.core.datagram.datagram-socket-options)

(import io.vertx.core.datagram.DatagramSocketOptions)
(import io.vertx.core.json.JsonObject)

(defn new-instance
  ([] (new DatagramSocketOptions))
  ([^JsonObject json] (new DatagramSocketOptions json)))

(defn set-broadcast [^DatagramSocketOptions datagram-socket-options broadcast] (.setBroadcast datagram-socket-options broadcast))
(defn is-broadcast [^DatagramSocketOptions datagram-socket-options] (.isBroadcast datagram-socket-options))
(defn set-ip-v6 [^DatagramSocketOptions datagram-socket-options ip-v6] (.setIpV6 datagram-socket-options ip-v6))
(defn is-ip-v6 [^DatagramSocketOptions datagram-socket-options] (.isIpV6 datagram-socket-options))
(defn set-log-activity [^DatagramSocketOptions datagram-socket-options log-activity] (.setLogActivity datagram-socket-options log-activity))
(defn get-log-activity [^DatagramSocketOptions datagram-socket-options] (.getLogActivity datagram-socket-options))
(defn set-loopback-mode-disabled [^DatagramSocketOptions datagram-socket-options loopback-mode-disabled] (.setLoopbackModeDisabled datagram-socket-options loopback-mode-disabled))
(defn is-loopback-mode-disabled [^DatagramSocketOptions datagram-socket-options] (.isLoopbackModeDisabled datagram-socket-options))
(defn set-multicast-network-interface [^DatagramSocketOptions datagram-socket-options multicast-network-interface] (.setMulticastNetworkInterface datagram-socket-options multicast-network-interface))
(defn get-multicast-network-interface [^DatagramSocketOptions datagram-socket-options] (.getMulticastNetworkInterface datagram-socket-options))
(defn set-multicast-time-to-live [^DatagramSocketOptions datagram-socket-options multicast-time-to-live] (.setMulticastTimeToLive datagram-socket-options multicast-time-to-live))
(defn get-multicast-time-to-live [^DatagramSocketOptions datagram-socket-options] (.getMulticastTimeToLive datagram-socket-options))
(defn set-receive-buffer-size [^DatagramSocketOptions datagram-socket-options receive-buffer-size] (.setReceiveBufferSize datagram-socket-options receive-buffer-size))
(defn get-receive-buffer-size [^DatagramSocketOptions datagram-socket-options] (.getReceiveBufferSize datagram-socket-options))
(defn set-reuse-address [^DatagramSocketOptions datagram-socket-options reuse-address] (.setReuseAddress datagram-socket-options reuse-address))
(defn is-reuse-address [^DatagramSocketOptions datagram-socket-options] (.isReuseAddress datagram-socket-options))
(defn set-reuse-port [^DatagramSocketOptions datagram-socket-options reuse-port] (.setReusePort datagram-socket-options reuse-port))
(defn is-reuse-port [^DatagramSocketOptions datagram-socket-options] (.isReusePort datagram-socket-options))
(defn set-send-buffer-size [^DatagramSocketOptions datagram-socket-options send-buffer-size] (.setSendBufferSize datagram-socket-options send-buffer-size))
(defn get-send-buffer-size [^DatagramSocketOptions datagram-socket-options] (.getSendBufferSize datagram-socket-options))
(defn set-traffic-class [^DatagramSocketOptions datagram-socket-options traffic-class] (.setTrafficClass datagram-socket-options traffic-class))
(defn get-traffic-class [^DatagramSocketOptions datagram-socket-options] (.getTrafficClass datagram-socket-options))