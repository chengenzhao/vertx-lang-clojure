(ns io.@{type.raw.moduleName}.clojure.@{type.raw.getSimpleName(CASE_KEBAB)})\n
\n

@foreach{method:methods}
  @if{method.name == type.raw.getSimpleName()}
    \n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method.name))} [@foreach{param:method.params}@{CASE_KEBAB.format(CASE_CAMEL.parse(param.name))}@end{' '}] ());constructor
  @else{method.staticMethod}
    \n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method.name))} [@foreach{param:method.params}@{CASE_KEBAB.format(CASE_CAMEL.parse(param.name))}@end{' '}] ());static method
  @else{}
    \n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method.name))} [@{type.raw.getSimpleName(CASE_KEBAB)} @foreach{param:method.params}@{CASE_KEBAB.format(CASE_CAMEL.parse(param.name))}@end{' '}] ())
  @end{}
@end{}